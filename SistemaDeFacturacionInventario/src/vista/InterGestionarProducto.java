package vista;

import Conexion.Conexion;
import controlador.Ctrl_Categoria;
import controlador.Ctrl_Producto;
import java.awt.Color;
import java.sql.Statement;
import java.sql.Connection;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.sql.ResultSet;
import javax.swing.JTable;
import java.sql.PreparedStatement;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import modelo.Categoria;
import modelo.Producto;

/**
 *
 * @author Carlos
 */
public class InterGestionarProducto extends javax.swing.JInternalFrame {

    private int idProductos;
    int obtenerIdCategoriaCombo = 0;
    

    public InterGestionarProducto() {
        initComponents();
        this.setSize(new Dimension(1190, 500));
        this.setTitle("Gestionar Productos");
        
        this.CargarTablaProductos();
        this.CargarComboCategoria();
        
        //insertar imagen en nuestro JLabel
        
        ImageIcon wallpaper = new ImageIcon("src/img/wavy-gradient-dark-green.png");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(1180, 500, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_productos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton_actualizar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_cantidad = new javax.swing.JTextField();
        txt_precio = new javax.swing.JTextField();
        txt_descripcion = new javax.swing.JTextField();
        jComboBox_itbis = new javax.swing.JComboBox<>();
        jComboBox_categoria = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jComboBox_estado = new javax.swing.JComboBox<>();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setPreferredSize(new java.awt.Dimension(1192, 496));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Gestionar Productos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 20, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_productos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1000, 250));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 1020, 270));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_actualizar.setBackground(new java.awt.Color(51, 204, 0));
        jButton_actualizar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_actualizar.setText("Actualizar");
        jButton_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_actualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 50, 130, 270));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Nombre:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 90, -1));

        txt_nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nombreActionPerformed(evt);
            }
        });
        jPanel3.add(txt_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 170, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Cantidad:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 90, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Precio:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 90, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Descripción:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, 90, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("ITBIS:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 10, 90, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Categorías:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 40, 90, -1));
        jPanel3.add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 170, -1));
        jPanel3.add(txt_precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 170, -1));
        jPanel3.add(txt_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 40, 170, -1));

        jComboBox_itbis.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione ITBIS:", "No gravado por ITBIS:", "16%", "18%" }));
        jPanel3.add(jComboBox_itbis, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 40, 170, -1));

        jComboBox_categoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Categoria: ", "Item 3", "Item 4" }));
        jPanel3.add(jComboBox_categoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 10, 170, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Estado:");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 10, 90, -1));

        jComboBox_estado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Estado:", "Activo", "Inactivo" }));
        jComboBox_estado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_estadoActionPerformed(evt);
            }
        });
        jPanel3.add(jComboBox_estado, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 10, 170, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 1160, 80));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1180, 460));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_actualizarActionPerformed
        
        Producto producto = new Producto();
        Ctrl_Producto controlProducto = new Ctrl_Producto();
        String itbis = "";
        String categoria = "";
        String estado;
        itbis = jComboBox_itbis.getSelectedItem().toString().trim();
        categoria = jComboBox_categoria.getSelectedItem().toString().trim();
        estado = jComboBox_estado.getSelectedItem().toString().trim();
        
        //validar campos de text
        if (txt_nombre.getText().isEmpty() || txt_cantidad.getText().isEmpty() || txt_precio.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "Complete informacion en todos los campos");
            txt_nombre.setBackground(Color.red);
            txt_cantidad.setBackground(Color.red);
            txt_precio.setBackground(Color.red);

        } else {
            //consulta si el producto existe        

                if (itbis.equalsIgnoreCase("Seleccione ITBIS:")) {
                JOptionPane.showMessageDialog(null, "Seleccione ITBIS");
            } else {
                if (categoria.equalsIgnoreCase("Seleccione Categoria: ")) {
                    JOptionPane.showMessageDialog(null, "Seleccione Categoria");
                } else {

                    try {

                        producto.setNombre(txt_nombre.getText().trim());
                        producto.setCantidad(Integer.parseInt(txt_cantidad.getText().trim()));
                        String precioTXT = "";
                        double Precio = 0.0;
                        precioTXT = txt_precio.getText().trim();
                        boolean aux = false;

                        // No permite guardar decimal usando comas ,
                        for (int i = 0; i < precioTXT.length(); i++) {
                            if (precioTXT.charAt(i) == ',') {
                                String precioNuevo = precioTXT.replace(",", ".");
                                Precio = Double.parseDouble(precioNuevo);
                                aux = true;

                            }

                        }

                        //Evaluar 
                        if (aux == true) {
                            producto.setPrecio(Precio);
                        } else {
                            Precio = Double.parseDouble(precioTXT);
                            producto.setPrecio(Precio);
                        }

                        producto.setDescripcion(txt_descripcion.getText().trim());
                        //Porcentaje ITBIS
                        if (itbis.equalsIgnoreCase("No gravado por ITBIS:")) {
                            producto.setPorcentajeItbis(0);
                        } else if (itbis.equalsIgnoreCase("16%")) {
                            producto.setPorcentajeItbis(16);
                        } else if (itbis.equalsIgnoreCase("18%")) {
                            producto.setPorcentajeItbis(18);
                        }

                        //idCategoria - cargar metodo
                        this.IdCategoria();
                        producto.setIdCategoria(obtenerIdCategoriaCombo);
                        if (estado.equalsIgnoreCase("Activo")) {
                            producto.setEstado(1);
                        } else {
                            producto.setEstado(0);
                        }

                        if (controlProducto.actualizar(producto, idProductos)) {
                            JOptionPane.showMessageDialog(null, "Registro Actualizado");
                            txt_nombre.setBackground(Color.green);
                            txt_cantidad.setBackground(Color.green);
                            txt_precio.setBackground(Color.green);
                            txt_descripcion.setBackground(Color.green);

                            this.CargarComboCategoria();
                            this.CargarTablaProductos();
                            this.jComboBox_itbis.setSelectedItem("Seleccione ITBIS:");
                            this.Limpiar();

                        } else {
                            JOptionPane.showMessageDialog(null, "Error al Actualizar");
                        }

                    } catch (HeadlessException | NumberFormatException e) {
                        System.out.println("Error en: " + e);
                    }
                }

            }


        }

    }//GEN-LAST:event_jButton_actualizarActionPerformed

    private void txt_nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombreActionPerformed

    private void jComboBox_estadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_estadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_estadoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_actualizar;
    private javax.swing.JComboBox<String> jComboBox_categoria;
    private javax.swing.JComboBox<String> jComboBox_estado;
    private javax.swing.JComboBox<String> jComboBox_itbis;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_productos;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_descripcion;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_precio;
    // End of variables declaration//GEN-END:variables

    
    //Metodo para limpiar
    private void Limpiar(){
        txt_nombre.setText("");
        txt_cantidad.setText("");
        txt_precio.setText("");
        txt_descripcion.setText("");
        jComboBox_itbis.setSelectedItem("Seleccione ITBIS:");
        jComboBox_categoria.setSelectedItem("Seleccione Categoria:");
        this.jComboBox_estado.setSelectedItem("Seleccione Estado:");
    }

    //Metodo para cargar categorias en el JCombox
    
    private void CargarComboCategoria(){
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_categoria";
        Statement st;
        
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_categoria.removeAllItems();
            jComboBox_categoria.addItem("Seleccione Categoria:");
            
            while (rs.next()) {
                jComboBox_categoria.addItem(rs.getString("descripcion"));
            }
            
            cn.close();
            
            
        } catch (SQLException e) {
            System.out.println("ERROR AL CARGAR CATEGORIAS");
        }
        
        
    }
    
    
    // Metodo para mostrar los productos
    
    String descripcionCategoria = "";
    double precio = 0.0;
    int porcentajeItbis = 0;
    double ITBIS = 0;
    
    private void CargarTablaProductos() {
        Connection con = Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();

        String sql = "select p.idProducto, p.nombre, p.cantidad, p.precio, p.descripcion, p.porcentajeItbis, c.descripcion, p.estado from tb_producto As p, tb_categoria As c where p.idCategoria = c.idCategoria;";
        Statement st;

        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            InterGestionarProducto.jTable_productos = new JTable(model);
            InterGestionarProducto.jScrollPane1.setViewportView(InterGestionarProducto.jTable_productos);

            model.addColumn("#"); // ID
            model.addColumn("nombre");
            model.addColumn("cantidad");
            model.addColumn("precio");
            model.addColumn("descripcion");
            model.addColumn("ITBIS");
            model.addColumn("Categoria");
            model.addColumn("estado");

            while (rs.next()) {
                
                precio = rs.getDouble("precio");
                porcentajeItbis = rs.getInt("porcentajeItbis");
                
                Object fila[] = new Object[8];

                for (int i = 0; i < 8; i++) {
                    
                    if (i == 5) {
                        this.calcularItbis(precio, porcentajeItbis);
                        fila[i] = ITBIS;
                        
                        rs.getObject(i + 1);
                        
                    } else {
                        fila[i] = rs.getObject(i + 1);
                    
                    }
                    
                    if (i == 7) {
                        String estado = String.valueOf(rs.getObject(i + 1));
                        if (estado.equalsIgnoreCase("1")) {
                            fila[i] = "Activo";
                        } else {
                            fila[i] = "Inactivo";
                        }
                    } else {
                        fila[i] = rs.getObject(i + 1);
                    }
                    
                }

                model.addRow(fila);
            }

            con.close();

        } catch (SQLException e) {
            System.out.println("Error al llenar la tabla productos: ");

        }
        
        jTable_productos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e){
                int fila_point = jTable_productos.rowAtPoint(e.getPoint());
                int columna_point = 0;
                
                if (fila_point > -1){
                    idProductos = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosProductoSeleccionada(idProductos);
                }
            }
        });

    }
    
    private double calcularItbis(double precio, int itbis){
        
        int p_itbis = itbis;
        
        switch (p_itbis) {

            case 0:
                ITBIS = 0.0;
                break;

            case 16:
                ITBIS = precio * 0.16;
                break;

            case 18:
                ITBIS = precio * 0.18;
                break;

            default:
                break;
        }
        
        // redondear decimales 
        
        ITBIS = (double) Math.round(ITBIS * 100) / 100;
        return ITBIS;
        
    
    }
    
    
    
    
    private void EnviarDatosProductoSeleccionada (int idProductos){
        try {
            Connection con = Conexion.conectar();
            PreparedStatement pst = con.prepareStatement(
                    "select * from tb_producto where idProducto = '" + idProductos + "'");
            
            ResultSet rs = pst.executeQuery();
            
            if (rs.next()){
                txt_nombre.setText(rs.getString("nombre"));
                txt_cantidad.setText(rs.getString("cantidad"));
                txt_precio.setText(rs.getString("precio"));
                txt_descripcion.setText(rs.getString("descripcion"));
                int itbis = rs.getInt("porcentajeItbis");
                int estado = rs.getInt("estado");
                if (estado == 1) {
                    jComboBox_estado.setSelectedItem("Activo");
                } else {
                    jComboBox_estado.setSelectedItem("Inactivo");
                }
                
                switch (itbis) {

                    case 0:
                        jComboBox_itbis.setSelectedItem("No gravado por ITBIS:");
                        break;

                    case 16:
                        jComboBox_itbis.setSelectedItem("16%");
                        break;

                    case 18:
                        jComboBox_itbis.setSelectedItem("18%");
                        break;

                    default:
                        jComboBox_itbis.setSelectedItem("Seleccione ITBIS:");
                        break;
                }
                
                int idCate = rs.getInt("idCategoria");
                jComboBox_categoria.setSelectedItem(relacionarCategoria(idCate));
                
            }
            
            con.close();
                    
        } catch (SQLException e) {
            System.out.println("Error al seleccionar producto: " + e);
        }
    }
    
    
    // Metodo para relacionar categorias
    
    private String relacionarCategoria(int idCategoria){
        
        String sql = "select descripcion from tb_categoria where idCategoria = '" + idCategoria + "'";
        Statement st;
        
        try {
            Connection cn = Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            
            
            while (rs.next()) {
               descripcionCategoria = rs.getString("descripcion");
            }
            
            cn.close();
            
            
        } catch (SQLException e) {
            System.out.println("ERROR AL OBTENER CATEGORIAS");
        }
        
        return descripcionCategoria;
        
    }
    
    private int IdCategoria() {
        String sql = "select * from tb_categoria where descripcion = '" + this.jComboBox_categoria.getSelectedItem() + "'";
        Statement st;

        try {
            Connection cn = Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                obtenerIdCategoriaCombo = rs.getInt("idCategoria");
            }

        } catch (SQLException e) {
            System.out.println("error al obtener id Categoria");
        }

        return obtenerIdCategoriaCombo;
    }
    
    
    
    
}
